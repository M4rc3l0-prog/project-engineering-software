
package view.automaticdb;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.swing.JOptionPane;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import java.awt.Color;

/**
 *
 * @author Marcelo
 */
public class Configuracaodb extends javax.swing.JFrame {

	final private String driver = "com.mysql.cj.jdbc.Driver";
	Connection CONEXAO;
	private boolean VERIFICACAO = false;

	/**
	 * Creates new form CONFIGURARCAO
	 */
	public Configuracaodb() {
		initComponents();

		if(VERIFICACAO == false) {
			LE_CONFIGURACAO_GRAVADA();    
		}


	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel1.setForeground(Color.WHITE);
		T_Host = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		jLabel2.setForeground(Color.WHITE);
		T_Porta = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		jLabel3.setForeground(Color.WHITE);
		T_User = new javax.swing.JTextField();
		jLabel4 = new javax.swing.JLabel();
		jLabel4.setForeground(Color.WHITE);
		T_Senha = new javax.swing.JTextField();
		jButton1 = new javax.swing.JButton();
		BotaoSalvar = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jPanel1.setLayout(null);

		jLabel1.setText("Host");
		jPanel1.add(jLabel1);
		jLabel1.setBounds(50, 70, 87, 14);

		T_Host.setText("localhost");
		jPanel1.add(T_Host);
		T_Host.setBounds(50, 90, 230, 40);

		jLabel2.setText("Porta");
		jPanel1.add(jLabel2);
		jLabel2.setBounds(380, 70, 75, 14);

		T_Porta.setText("3306");
		jPanel1.add(T_Porta);
		T_Porta.setBounds(380, 90, 160, 40);

		jLabel3.setText("User");
		jPanel1.add(jLabel3);
		jLabel3.setBounds(60, 160, 100, 14);

		T_User.setText("root");
		jPanel1.add(T_User);
		T_User.setBounds(50, 180, 500, 40);

		jLabel4.setText("Password");
		jPanel1.add(jLabel4);
		jLabel4.setBounds(50, 240, 100, 30);
		jPanel1.add(T_Senha);
		T_Senha.setBounds(50, 270, 500, 40);

		jButton1.setText("Teste");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});
		jPanel1.add(jButton1);
		jButton1.setBounds(50, 320, 110, 40);

		BotaoSalvar.setText("Salvar");
		BotaoSalvar.setEnabled(false);
		BotaoSalvar.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				BotaoSalvarActionPerformed(evt);
			}
		});
		jPanel1.add(BotaoSalvar);
		BotaoSalvar.setBounds(50, 380, 110, 40);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
						.addContainerGap())
				);
		
		JLabel lblNewLabel = new JLabel("New label");
		lblNewLabel.setIcon(new ImageIcon("C:\\Users\\marce\\Desktop\\project-engineering-software\\Clean\\src\\img\\BANCO-DADOS.png"));
		lblNewLabel.setBounds(0, -16, 592, 446);
		jPanel1.add(lblNewLabel);

		setSize(new java.awt.Dimension(616, 496));
		setLocationRelativeTo(null);
	}

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		if (CONEXAO_SERVIDOR(T_Host.getText(), T_Porta.getText(), T_User.getText(), T_Senha.getText())) {
			JOptionPane.showMessageDialog(null, "Teste Bem Sucedido");
			BotaoSalvar.setEnabled(true);
		} else {
			JOptionPane.showMessageDialog(null, "Falha Na Conexï¿½o", "Falha", 0);
		}
	}

	private void BotaoSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoSalvarActionPerformed
		if (CONEXAO_SERVIDOR(T_Host.getText(), T_Porta.getText(), T_User.getText(), T_Senha.getText())) {
			if (GRAVA_CONFIGURACAO()) {//SE CONSEGUIR GRAVAR A CONFIGURAï¿½ï¿½O PASSA PARA O PROXIMO PASSO
				if (LE_CONFIGURACAO_GRAVADA()) {//SE CONSEGUIR LER A GRAVAï¿½ï¿½O REALIZADA PASSA PARA O PROXIMO PASSO
					if (CRIA_DATA_BASE_COMPLETO()) { //SE Nï¿½O OCORRER ERRO NO QUERES SQL  PASSA PARA O PROXIMO PASSO
						FECHA_CONEXAO();//PASSOU TODOS OS PASSO AGORA IRï¿½ FECHAR A TELA E ABRIR OUTRA
						 //CHAMO A TELA PRINCIPAL, OU SE QUIZER POSSO CHAMAR A TELA DE LOGIM. FICA A CRITERIO DO PROGRAMADOR
						dispose();
					} else {
						BotaoSalvar.setEnabled(false);
					}
				} else {
					BotaoSalvar.setEnabled(false);
				}
			} else {
				BotaoSalvar.setEnabled(false);
			}
		} else {
			BotaoSalvar.setEnabled(false);
		}


	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
	
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Configuracaodb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Configuracaodb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Configuracaodb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Configuracaodb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}




		Configuracaodb ESTA_TELA = new Configuracaodb();//INICIALIZO FAZENDO A PRIMEIRO A VERIFICAï¿½ï¿½O ANTES DE ABRIR A TELA
		if (ESTA_TELA.LE_CONFIGURACAO_GRAVADA()) {//SE CONSEGUIR SE CONETAR PASSO PARA O PRï¿½XIMO PASSO.

			if(ESTA_TELA.CRIA_DATA_BASE_COMPLETO()){ //SE Nï¿½O OCORRER ERRO NO QUERES SQL  PASSA PARA O PROXIMO PASSO
				ESTA_TELA.VERIFICACAO = true;//AQUI JA ESTï¿½ TUDO OK    
				ESTA_TELA.FECHA_CONEXAO();//FECHARA A CONEXAO_SERVIDOR
				
			}           
		}
		if(ESTA_TELA.VERIFICACAO == false) {// SE Nï¿½O OCORRER BEM AS VERIFICAï¿½ï¿½ES INICIALIZO O RUN PRA ABRIR A TELA DE CONFIGURAï¿½ï¿½O

			//        



		

		}
	}
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton BotaoSalvar;
	private javax.swing.JTextField T_Host;
	private javax.swing.JTextField T_Porta;
	private javax.swing.JTextField T_Senha;
	private javax.swing.JTextField T_User;
	private javax.swing.JButton jButton1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JPanel jPanel1;
	// End of variables declaration//GEN-END:variables

	private boolean LE_CONFIGURACAO_GRAVADA() {
		boolean leitura = false;
		try {
			String linha;
			String ArquivoConfiguracao = "C:/Users/marce/Desktop/project-engineering-software/ConexaoBanco/Configuracao/conexao.txt";
			int cont = 0;
			File arq = new File(ArquivoConfiguracao);
			if (arq.exists()) {

				FileReader reader = new FileReader(ArquivoConfiguracao);
				BufferedReader leitor = new BufferedReader(reader);
				while (true) {
					linha = leitor.readLine();
					if (cont == 0) {
						T_Host.setText(linha);
					}
					if (cont == 1) {
						T_Porta.setText(linha);
					}
					if (cont == 2) {
						T_User.setText(linha);
					}
					if (cont >= 3) {
						T_Senha.setText(linha);
						break;
					}
					System.out.println(linha + "\n");
					cont++;
				}
			}
			if (arq.exists()) {
				if (CONEXAO_SERVIDOR(T_Host.getText(), T_Porta.getText(), T_User.getText(), T_Senha.getText())) {
					leitura = true;
				}
			}

		} catch (Exception erro) {
		}

		return leitura;
	}

	private boolean GRAVA_CONFIGURACAO() {
		boolean grava = false;
		try {
			File diretorio = new File("C:/Users/marce/Desktop/project-engineering-software/ConexaoBanco/Configuracao");
			if (!diretorio.exists()) {
				diretorio.mkdirs();
			}
			FileWriter arq1 = new FileWriter("C:/Users/marce/Desktop/project-engineering-software/ConexaoBanco/Configuracao/conexao.txt");
			PrintWriter gravarArq = new PrintWriter(arq1);
			gravarArq.println(T_Host.getText());
			gravarArq.println(T_Porta.getText());
			gravarArq.println(T_User.getText());
			gravarArq.println(T_Senha.getText());
			arq1.close();
			grava = true;
		} catch (IOException erro) {
			JOptionPane.showMessageDialog(null, "Vocï¿½ nao tem permiï¿½ï¿½o de adminstrador para configurar o"
					+ " Sistema.", "ERRO !", 0);
		}
		return grava;
	}

	private boolean CONEXAO_SERVIDOR(String Servidor, String Porta, String usuario, String Senha) {
		boolean com = false;
		String SERVIDOR = Servidor;
		String PORTA_CONEXAO = Porta;
		String USUARIO = usuario;
		String SENHA = Senha;
		try {
			Class.forName(driver);
			CONEXAO = DriverManager.getConnection("jdbc:mysql://" + SERVIDOR + ":" + PORTA_CONEXAO + "",
					USUARIO, SENHA);
			com = true;
		} catch (ClassNotFoundException Fonte) {
			JOptionPane.showMessageDialog(null, "Driver nao localizado");
		} catch (SQLException Fonte) {
		}
		return com;
	}

	private boolean CONEXAO_DATABASE(String Servidor, String Porta, String usuario, String Senha) {
		boolean com = false;
		String SERVIDOR = Servidor;
		String PORTA_CONEXAO = Porta;
		String USUARIO = usuario;
		String SENHA = Senha;
		try {
			Class.forName(driver);
			CONEXAO = DriverManager.getConnection("jdbc:mysql://" + SERVIDOR + ":" + PORTA_CONEXAO
					+ "/cleander", USUARIO, SENHA);
			com = true;
		} catch (ClassNotFoundException Fonte) {
			JOptionPane.showMessageDialog(null, "Driver nao localizado");
		} catch (SQLException Fonte) {
		}
		return com;
	}

	private void FECHA_CONEXAO() {
		try {
			CONEXAO.close();
		} catch (SQLException fech) {
			JOptionPane.showMessageDialog(null, "Erro ao fechar conexao com o banco de dados" + fech);
		}
	}

	private boolean CRIA_DATA_BASE_COMPLETO() {
		boolean sucesso = true;
		if (CRIA_BANCO() == false) {
			sucesso = false;
		} else if (CRIA_TABELAS() == false) {
			sucesso = false;
		}

		return sucesso;
	}

	private boolean CRIA_BANCO() {
		boolean sucesso = false;
		PreparedStatement stm;
		String sql = "CREATE DATABASE IF NOT EXISTS cleander";

		try {
			stm = CONEXAO.prepareStatement(sql);
			stm.execute();
			sucesso = true;
		} catch (SQLException ex) {
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
		}
		
		return sucesso;
	}
//
	private boolean CRIA_TABELAS() {
		boolean sucesso = true;

		CONEXAO_DATABASE(T_Host.getText(), T_Porta.getText(), T_User.getText(), T_Senha.getText());

		if (CRIA_TABELA_cliente() == false) {
			sucesso = false;
		} else if (CRIA_TABELA_prestador() == false) {
			sucesso = false;
		} else if (CRIA_TABELA_servico() == false) {
			sucesso = false;
		}

		FECHA_CONEXAO();
		return sucesso;
	}

	private boolean CRIA_TABELA_cliente() {
		boolean sucesso = false;
		PreparedStatement stm;
		String sql = "CREATE TABLE  IF NOT EXISTS cliente (\r\n"
				+ "  `id_cliente` int(11) NOT NULL,\r\n"
				+ "  `nome_cliente` varchar(100) NOT NULL,\r\n"
				+ "  `email_cliente` varchar(100) NOT NULL,\r\n"
				+ "  `telefone_cliente` varchar(9) NOT NULL,\r\n"
				+ "  `endereco_cliente` varchar(100) NOT NULL,\r\n"
				+ "  `sexo_cliente` varchar(20) NOT NULL,\r\n"
				+ "  `senha_cliente` varchar(30) NOT NULL,\r\n"
				+ "  `dtnascimento_cliente` varchar(9) NOT NULL,\r\n"
				+ "  `cliente_servico` int(11) NOT NULL\r\n"
				+ ") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4";
		try {
			stm = CONEXAO.prepareStatement(sql);
			stm.execute();
			sucesso = true;
		} catch (SQLException ex) {
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
		}
		return sucesso;
	}

	private boolean CRIA_TABELA_prestador() {
		boolean sucesso = false;
		PreparedStatement stm;
		String sql = "CREATE TABLE  IF NOT EXISTS prestador (`id_prestador` int(11) NOT NULL,\r\n"
				+ "  `nome_prestador` varchar(100) NOT NULL,\r\n"
				+ "  `email_prestador` varchar(100) NOT NULL,\r\n"
				+ "  `telefone_prestador` varchar(9) NOT NULL,\r\n"
				+ "  `endereco_prestador` varchar(100) NOT NULL,\r\n"
				+ "  `sexo_prestador` varchar(20) NOT NULL,\r\n"
				+ "  `senha_prestador` varchar(30) NOT NULL,\r\n"
				+ "  `dtnascimento_prestador` varchar(9) NOT NULL,\r\n"
				+ "  `prestador_servico` int(11) NOT NULL\r\n"
				+ ") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4";
		try {
			stm = CONEXAO.prepareStatement(sql);
			stm.execute();
			sucesso = true;
		} catch (SQLException ex) {
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
		}
		return sucesso;
	}

	private boolean CRIA_TABELA_servico() {
		boolean sucesso = false;
		PreparedStatement stm;
		String sql = "CREATE TABLE  IF NOT EXISTS servico (`id_servico` int(11) NOT NULL,\r\n"
				+ "  `nome_servico` varchar(100) NOT NULL\r\n"
				+ ") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4";
		try {
			stm = CONEXAO.prepareStatement(sql);
			stm.execute();
			sucesso = true;
		} catch (SQLException ex) {
			JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
		}
		return sucesso;
	}
}